{"version":3,"sources":["./node_modules/bnc-onboard/dist/esm/fortmatic-1b00cae4.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsB;AACN;AAC2C;AACE;AAC7D;;AAEA;AACA,EAAE,iEAAY;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE,iEAAY;AACd;AACA;AACA;AACA,GAAG;AACH,EAAE,iEAAY;AACd;AACA;AACA;AACA,GAAG;AACH,EAAE,iEAAY;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,sKAAmB;;AAEjE;AACA;AACA;AACA,6EAA6E,gEAAW;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,wEAAS,E","file":"fortmatic-1b00cae4-js-es2015.js","sourcesContent":["import 'bignumber.js';\nimport 'bowser';\nimport { n as networkName } from './utilities-e6e64de4.js';\nimport { v as validateType } from './validation-9ad8443b.js';\nvar fortmaticIcon = \"\\n  <svg \\n    height=\\\"40\\\" \\n    viewBox=\\\"0 0 40 40\\\" \\n    width=\\\"40\\\" \\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  >\\n    <path d=\\\"m2744.99995 1155h9.99997 10.00008v9.98139h-10.00008-9.99997-9.99998v9.9814.64001 9.28323.05815 9.9234h-9.99997v-9.9234-.05815-9.28323-.64001-9.9814-9.98139h9.99997zm9.99961 29.88552h-9.94167v-9.92324h19.93595v10.27235c0 2.55359-1.01622 5.00299-2.82437 6.80909-1.80867 1.8061-4.26182 2.82181-6.82018 2.82335h-.34973z\\\" \\n      fill=\\\"#617bff\\\" \\n      fill-rule=\\\"evenodd\\\" \\n      transform=\\\"translate(-2725 -1155)\\\"/>\\n  </svg>\\n\";\n\nfunction fortmatic(options) {\n  validateType({\n    name: 'Fortmatic options',\n    value: options,\n    type: 'object'\n  });\n  var apiKey = options.apiKey,\n      networkId = options.networkId,\n      preferred = options.preferred;\n  validateType({\n    name: 'apiKey',\n    value: apiKey,\n    type: 'string'\n  });\n  validateType({\n    name: 'networkId',\n    value: networkId,\n    type: 'number'\n  });\n  validateType({\n    name: 'preferred',\n    value: preferred,\n    type: 'boolean',\n    optional: true\n  });\n  var instance;\n  var provider;\n  return {\n    name: 'Fortmatic',\n    svg: fortmaticIcon,\n    wallet: function wallet(helpers) {\n      var _ref, Fortmatic, BigNumber;\n\n      return regeneratorRuntime.async(function wallet$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (instance) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 3;\n              return regeneratorRuntime.awrap(import('fortmatic'));\n\n            case 3:\n              _ref = _context.sent;\n              Fortmatic = _ref[\"default\"];\n              instance = new Fortmatic(apiKey, networkId === 1 ? undefined : networkName(networkId));\n              provider = instance.getProvider();\n\n            case 7:\n              BigNumber = helpers.BigNumber;\n              return _context.abrupt(\"return\", {\n                provider: provider,\n                instance: instance,\n                \"interface\": {\n                  name: 'Fortmatic',\n                  connect: instance.user.login,\n                  address: {\n                    get: function get() {\n                      return Promise.resolve(provider.account);\n                    }\n                  },\n                  network: {\n                    get: function get() {\n                      return Promise.resolve(networkId);\n                    }\n                  },\n                  balance: {\n                    get: function get() {\n                      return provider.account && instance.user.getBalances().then(function (res) {\n                        return res[0] ? BigNumber(res[0].crypto_amount).times(BigNumber('1000000000000000000')).toString(10) : null;\n                      });\n                    }\n                  }\n                }\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    },\n    desktop: true,\n    mobile: true,\n    preferred: preferred\n  };\n}\n\nexport default fortmatic;"],"sourceRoot":"webpack:///"}